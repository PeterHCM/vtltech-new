@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IPublishedContent>
@using Umbraco.Extensions
@inject IPublishedValueFallback PublishedValueFallback

@{
    var children = Model.Children()
        .Where(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide"))
        .ToArray();
}

@if (children.Any())
{
    <ul class="absolute top-full left-0 mt-[2px] min-w-[180px]
               bg-white text-gray-800 border border-gray-300 shadow-xl
               dark:bg-neutral-900 dark:text-slogan dark:border-gray-700
               rounded-lg z-50 transform scale-y-0 opacity-0 invisible origin-top transition-all duration-300 ease-out
               group-hover:scale-y-100 group-hover:opacity-100 group-hover:visible">
        @foreach (var child in children)
        {
            var isActive = Model.Path?.Split(',')?.Contains(child.Id.ToString()) ?? false;
            var grandChildren = child.Children()
                .Where(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide"))
                .ToArray();

            <li class="group relative">
                <div class="flex items-center justify-between px-4 py-2">
                    <a href="@child.Url()" class="transition-colors hover:text-primary dark:hover:text-primary @(isActive ? "text-primary font-semibold underline" : "text-gray-800 dark:text-slogan")">
                        @child.Name
                    </a>

                    @if (grandChildren.Any())
                    {
                        <svg class="w-4 h-4 ml-2 transform transition-transform duration-300 ease-out group-hover:rotate-90
                                    text-gray-800 dark:text-slogan"
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M9 5l7 7-7 7"/>
                        </svg>
                    }
                </div>

                @if (grandChildren.Any())
                {
                    <ul class="absolute top-0 left-full mt-[2px] min-w-[180px]
                               bg-white text-gray-800 border border-gray-300 shadow-xl
                               dark:bg-neutral-900 dark:text-slogan dark:border-gray-700
                               rounded-lg z-50 transform -translate-x-4 opacity-0 invisible transition-all duration-300 delay-100 ease-out
                               group-hover:translate-x-0 group-hover:opacity-100 group-hover:visible">
                        @foreach (var grandChild in grandChildren)
                        {
                            var isGrandActive = Model.Path?.Split(',')?.Contains(grandChild.Id.ToString()) ?? false;
                            <li>
                                <a href="@grandChild.Url()" class="block px-4 py-2 text-sm transition-colors hover:text-primary dark:hover:text-primary @(isGrandActive ? "text-primary font-semibold underline" : "text-gray-800 dark:text-slogan")">
                                    @grandChild.Name
                                </a>
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
}

@functions {
    // This function is the only one you need.
    public bool IsActive(IPublishedContent item)
    {
        if (item == null) return false;
        return Model.Path?.Split(',').Contains(item.Id.ToString()) ?? false;
    }
}