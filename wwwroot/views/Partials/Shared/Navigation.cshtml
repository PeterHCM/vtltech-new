@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IPublishedContent>
@using Umbraco.Extensions
@inject IPublishedValueFallback PublishedValueFallback
@using Microsoft.AspNetCore.Html
@{
    if (Umbraco.AssignedContentItem == null || Umbraco.AssignedContentItem.Root() == null)
    {
        <div class="text-red-500">Error: Page or homepage not available.</div>
        return;
    }    
    var homePage = Umbraco.AssignedContentItem.Root();
    var menuItems = homePage.Children()
        .Where(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide"))
        .ToArray();
    var maxDepth = 3;
    var isLoggedIn = Context.User.GetMemberIdentity()?.IsAuthenticated ?? false;
    var currentDomain = Context.Request.Host.Value;
    var isIntranet = currentDomain.Contains("intranet");
    var selectedSearchGuid = "c0e6b387-4aea-4dde-a1ad-14e94775fe1d";
    if (isIntranet)
    {   
        selectedSearchGuid = "8d9393a2-028a-4b82-ba66-91aa42f2f753";
    }
    Guid searchPageGuid = new Guid(selectedSearchGuid);
    var searchPageNode = Umbraco.Content(searchPageGuid);
    string searchPageUrl = searchPageNode?.Url() ?? "/search"; // Default fallback URL
    Guid loginPageGuid = new Guid("00af5c49-5550-46f9-b528-e981426a70f6");
    var loginPageNode = Umbraco.Content(loginPageGuid);
    string loginPageUrl = loginPageNode?.Url() ?? "/login";
    if (searchPageNode != null)
    {
        searchPageUrl = searchPageNode.Url();
    }
}
<div class="relative md:hidden">
    <input type="checkbox" id="menu-toggle" class="hidden peer">
    <label for="menu-toggle" class="text-gray-900 dark:text-white cursor-pointer p-2 z-50" aria-label="Toggle menu">
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
    </label>

    <div id="mobile-menu"
         class="peer-checked:block hidden fixed inset-0 top-20 bg-white dark:bg-gray-900 z-40 overflow-y-auto
                transition-all duration-300 ease-out transform scale-y-95 opacity-0
                peer-checked:scale-y-100 peer-checked:opacity-100 origin-top">
        <div class="px-4 pt-4 pb-6 space-y-2">
            @{
                var delay = 0;
                foreach (var item in menuItems)
                {
                    var hasChildren = item.Children()?.Any(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide")) == true;
                    var isActive = item.IsAncestorOrSelf(Umbraco.AssignedContentItem);
                    var activeClass = isActive ? "menu-item-active" : "";
                    var url = item.Url() ?? "#";
                    var name = item.Name ?? "Unnamed";
                    var toggleId = $"toggle-{item.Id}";
                    var delayClass = $"delay-[{delay}ms]";
                    delay += 50;
                    if (hasChildren)
                    {
                        <div class="relative transition-all duration-300 ease-out @delayClass">
                            <input type="checkbox" id="@toggleId" class="hidden peer">
                            <label for="@toggleId" class="flex justify-between items-center menu-item @activeClass cursor-pointer pr-8">
                                <span>@name</span>
                            </label>
                            <svg class="absolute right-2 top-2 h-4 w-4 text-gray-500 dark:text-gray-300 transform transition-transform duration-300 peer-checked:rotate-90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                            <div class="peer-checked:max-h-screen max-h-0 overflow-hidden transition-all duration-300 ease-in-out pl-4">
                                @RenderMobileSubMenu(item, PublishedValueFallback, Umbraco.AssignedContentItem, maxDepth, 2)
                            </div>
                        </div>
                    }
                    else
                    {
                        <a href="@url" class="menu-item @activeClass transition-all duration-300 ease-out @delayClass">@name</a>
                    }
                }
            }
            <div class="flex-grow flex justify-end items-center">
            <!-- Search Icon -->
            <form method="get" action="@searchPageUrl" class="relative w-full transition-all duration-300 ease-out delay-[@(delay)]ms">
                <input type="text"
                    name="q"
                    placeholder="Tìm kiếm..."
                    class="w-full px-4 py-2 pr-10 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary transition-all duration-200" />

                <button type="submit"
                        class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-300 hover:text-primary transition-colors">
                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                </button>
            </form>
            <!-- Login Icon -->
            @if (isIntranet)
            {
                <a href="@loginPageUrl" class="flex items-center text-gray-700 dark:text-gray-300 hover:text-primary transition-colors" aria-label="Đăng nhập">
                    @if (isLoggedIn)
                    {
                        <svg class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    }
                    else
                    {
                        <svg class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H3m0 0l4-4m-4 4l4 4m9-8v8a2 2 0 002 2h3" />
                        </svg>
                    }       
                </a>
            }
            </div>
        </div>
    </div>
</div>
@functions {
    private IHtmlContent RenderMobileSubMenu(IPublishedContent parent, IPublishedValueFallback fallback, IPublishedContent current, int maxDepth, int currentDepth)
    {
        if (parent == null || currentDepth > maxDepth) return Html.Raw("");

        var subItems = parent.Children()
            .Where(x => x.IsVisible(fallback) && !x.Value<bool>("naviHide"))
            .ToArray();

        if (!subItems.Any()) return Html.Raw("");

        var builder = new HtmlContentBuilder();
        builder.AppendHtml("<div class='pl-4 space-y-1'>");

        foreach (var item in subItems)
        {
            var hasChildren = item.Children()?.Any(x => x.IsVisible(fallback) && !x.Value<bool>("naviHide")) == true && currentDepth < maxDepth;
            var isActive = item.IsAncestorOrSelf(current);
            var activeClass = isActive ? "menu-item-active" : "";
            var url = item.Url() ?? "#";
            var name = item.Name ?? "Unnamed";
            var toggleId = $"toggle-sub-{item.Id}";

            if (hasChildren)
            {
                builder.AppendHtml($"<div class='relative'>");
                builder.AppendHtml($"<input type='checkbox' id='{toggleId}' class='hidden peer'>");
                builder.AppendHtml($"<label for='{toggleId}' class='flex justify-between items-center menu-item {activeClass} cursor-pointer pr-8'>");
                builder.AppendHtml($"<span>{name}</span>");
                builder.AppendHtml("</label>");
                builder.AppendHtml(@"<svg class='absolute right-2 top-2 h-4 w-4 text-gray-500 dark:text-gray-300 transform transition-transform duration-300 peer-checked:rotate-90' fill='none' viewBox='0 0 24 24' stroke='currentColor'>
                    <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 5l7 7-7 7' />
                </svg>");
                builder.AppendHtml("<div class='peer-checked:max-h-screen max-h-0 overflow-hidden transition-all duration-300 ease-in-out pl-4'>");
                builder.AppendHtml(RenderMobileSubMenu(item, fallback, current, maxDepth, currentDepth + 1));
                builder.AppendHtml("</div>");
                builder.AppendHtml("</div>");
            }
            else
            {
                builder.AppendHtml($"<a href='{url}' class='menu-item {activeClass}'>{name}</a>");
            }
        }

        builder.AppendHtml("</div>");
        return builder;
    }
}

<ul class="hidden md:flex items-center gap-6">
    @foreach (var item in menuItems)
    {
        var isActive = item.IsAncestorOrSelf(Umbraco.AssignedContentItem);
        var activeClass = isActive ? "menu-item-active" : "";
        var url = item.Url() ?? "#";
        var name = item.Name ?? "Unnamed";
        var hasChildren = item.Children()?.Any(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide")) == true;

        <li class="relative group">
            <a href="@url" class="menu-item @activeClass">@name</a>

            @if (hasChildren)
            {
                <ul class="absolute top-full left-0 mt-0 bg-white dark:bg-gray-900 shadow-lg rounded-md min-w-[12rem] z-50
                           hidden group-hover:block transition-all duration-200 ease-out">
                    @foreach (var child in item.Children().Where(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide")))
                    {
                        var childUrl = child.Url() ?? "#";
                        var childName = child.Name ?? "Unnamed";
                        var childActive = child.IsAncestorOrSelf(Umbraco.AssignedContentItem) ? "menu-item-active" : "";
                        var hasGrandChildren = child.Children()?.Any(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide")) == true;
                        
                        <li class="relative menu-sub-item">
                            <a href="@childUrl" class="menu-item @childActive flex items-center justify-between">
                                <span>@childName</span>
                                @if (hasGrandChildren)
                                {
                                    <svg class="h-4 w-4 text-gray-500 dark:text-gray-300 transition-transform duration-300 menu-sub-item-hover:rotate-90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                }
                            </a>
                            
                            @if (hasGrandChildren)
                            {
                                <ul class="absolute top-0 left-full bg-white dark:bg-gray-900 shadow-lg rounded-md min-w-[12rem] z-50
                                           hidden menu-sub-item-hover:block transition-all duration-200 ease-out">
                                    @foreach (var grand in child.Children().Where(x => x.IsVisible(PublishedValueFallback) && !x.Value<bool>("naviHide")))
                                    {
                                        var grandUrl = grand.Url() ?? "#";
                                        var grandName = grand.Name ?? "Unnamed";
                                        var grandActive = grand.IsAncestorOrSelf(Umbraco.AssignedContentItem) ? "menu-item-active" : "";

                                        <li>
                                            <a href="@grandUrl" class="menu-item @grandActive">@grandName</a>
                                        </li>
                                    }
                                </ul>
                            }
                        </li>
                    }
                </ul>
            }
        </li>
    }

    <li class="flex items-center gap-4 relative group">
        <button class="flex items-center text-gray-700 dark:text-gray-300 hover:text-primary transition-colors" aria-label="Tìm kiếm">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        </button>
        <form method="get" action="@searchPageUrl"
              class="absolute top-full right-0 mt-0 w-64 bg-white dark:bg-gray-900 shadow-lg rounded-md p-2
                      hidden group-hover:flex flex-col pointer-events-auto transition-all duration-300 ease-out z-50">
            <input type="text"
                   name="q"
                   placeholder="Tìm kiếm..."
                   class="w-full px-3 py-2 pr-10 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary" />
            <button type="submit"
                    class="absolute right-4 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-300 hover:text-primary">
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </button>
        </form>
        @if (isIntranet)
        {
            <a href="@loginPageUrl" class="flex items-center text-gray-700 dark:text-gray-300 hover:text-primary transition-colors" aria-label="Đăng nhập">
                @if (isLoggedIn)
                {
                    <svg class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                }
                else
                {
                    <svg class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H3m0 0l4-4m-4 4l4 4m9-8v8a2 2 0 002 2h3" />
                    </svg>
                }       
            </a>
        }
    </li>
</ul>
