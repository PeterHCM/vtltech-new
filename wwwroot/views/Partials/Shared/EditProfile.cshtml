@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Web.Common.Security
@using Umbraco.Cms.Web.Website.Controllers
@using Umbraco.Cms.Web.Website.Models
@using Umbraco.Extensions
@inject MemberModelBuilderFactory memberModelBuilderFactory;
@inject IMemberExternalLoginProviders memberExternalLoginProviders
@inject IExternalLoginWithKeyService externalLoginWithKeyService
@{

    // Build a profile model to edit
    var profileModel = await memberModelBuilderFactory
        .CreateProfileModel()
        // If null or not set, this will redirect to the current page
        .WithRedirectUrl(null)
        // Include editable custom properties on the form
        .WithCustomProperties(true)
        .BuildForCurrentMemberAsync();

    var success = TempData["FormSuccess"] != null;

    var loginProviders = await memberExternalLoginProviders.GetMemberProvidersAsync();
    var externalSignInError = ViewData.GetExternalSignInProviderErrors();

    var currentExternalLogin = profileModel is null
        ? new Dictionary<string, string>()
        : externalLoginWithKeyService.GetExternalLogins(profileModel.Key).ToDictionary(x=>x.LoginProvider, x=>x.ProviderKey);
}

<!-- Thêm Tailwind CSS nếu chưa có trong layout chính -->
<script src="https://cdn.tailwindcss.com"></script>

<!-- Thêm các thư viện JS cho Validation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>


<div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow-xl rounded-xl max-w-2xl mx-auto transition-colors duration-300">
    @if (profileModel != null)
    {
        if (success)
        {
            <!-- Thông báo thành công -->
            <div class="p-3 mb-4 text-sm text-green-700 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200" role="alert">
                Hồ sơ đã được cập nhật thành công!
            </div>
        }

        using (Html.BeginUmbracoForm<UmbProfileController>("HandleUpdateProfile", new { RedirectUrl = profileModel.RedirectUrl }))
        {
            <!-- Tiêu đề Form -->
            <h2 class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-6">Cập nhật tài khoản</h2>
            <hr class="border-gray-700 mb-6" />

            <!-- Hiển thị tóm tắt lỗi chung -->
            <div asp-validation-summary="All" class="text-sm text-red-400 p-2 border border-red-500 rounded-lg bg-red-900/20 mb-4"></div>

            <!-- Trường Name -->
            <div class="mb-5">
                <label asp-for="@profileModel.Name" class="block text-sm font-medium text-gray-400 dark:text-gray-300 mb-1"></label>
                <input asp-for="@profileModel.Name" 
                       class="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-800 text-gray-100 placeholder-gray-500 
                              focus:border-indigo-500 focus:ring-indigo-500 transition-colors duration-200" 
                       aria-required="true" />
                <span asp-validation-for="@profileModel.Name" class="text-sm text-red-500 mt-1 block"></span>
            </div>

            <!-- Trường Email -->
            <div class="mb-5">
                <label asp-for="@profileModel.Email" class="block text-sm font-medium text-gray-400 dark:text-gray-300 mb-1"></label>
                <input asp-for="@profileModel.Email" 
                       class="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-800 text-gray-100 placeholder-gray-500 
                              focus:border-indigo-500 focus:ring-indigo-500 transition-colors duration-200" 
                       autocomplete="username" aria-required="true" />
                <span asp-validation-for="@profileModel.Email" class="text-sm text-red-500 mt-1 block"></span>
            </div>

            <!-- Trường UserName (Nếu có) -->
            @if (!string.IsNullOrWhiteSpace(profileModel.UserName))
            {
                <div class="mb-5">
                    <label asp-for="@profileModel.UserName" class="block text-sm font-medium text-gray-400 dark:text-gray-300 mb-1"></label>
                    <input asp-for="@profileModel.UserName" 
                           class="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-800 text-gray-100 placeholder-gray-500 
                                  focus:border-indigo-500 focus:ring-indigo-500 transition-colors duration-200" 
                           autocomplete="username" aria-required="true" />
                    <span asp-validation-for="@profileModel.UserName" class="text-sm text-red-500 mt-1 block"></span>
                </div>
            }

            <!-- Các thuộc tính thành viên tùy chỉnh -->
            @if (profileModel.MemberProperties != null)
            {
                for (var i = 0; i < profileModel.MemberProperties.Count; i++)
                {
                    <div class="mb-5">
                        @Html.LabelFor(m => profileModel.MemberProperties[i].Value, profileModel.MemberProperties[i].Name, new { @class = "block text-sm font-medium text-gray-400 dark:text-gray-300 mb-1" })
                        <input asp-for="@profileModel.MemberProperties[i].Value" 
                               class="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-800 text-gray-100 placeholder-gray-500 
                                      focus:border-indigo-500 focus:ring-indigo-500 transition-colors duration-200" />
                        @Html.HiddenFor(m => profileModel.MemberProperties[i].Alias)
                        <span asp-validation-for="@profileModel.MemberProperties[i].Value" class="text-sm text-red-500 mt-1 block"></span>
                    </div>
                }
            }

            <!-- Nút Cập nhật -->
            <button type="submit" 
                    class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg 
                           transition duration-150 shadow-md transform hover:scale-[1.005] 
                           focus:outline-none focus:ring-4 focus:ring-indigo-500 focus:ring-opacity-50 mt-4">
                Cập Nhật
            </button>

            <!-- Quản lý tài khoản ngoài (External Logins) -->
            if (loginProviders.Any())
            {
                <hr class="border-gray-700 my-8"/>
                <h4 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">Liên kết tài khoản ngoài</h4>

                <!-- Hiển thị lỗi chung -->
                @if (externalSignInError?.AuthenticationType is null && externalSignInError?.Errors.Any() == true)
                {
                    <div class="p-3 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-900 dark:text-red-300" role="alert">
                        @Html.DisplayFor(x => externalSignInError.Errors)
                    </div>
                }

                <div class="space-y-3">
                    @foreach (var login in loginProviders)
                    {
                        var providerName = login.AuthenticationScheme.DisplayName;
                        var isLinked = currentExternalLogin.TryGetValue(login.ExternalLoginProvider.AuthenticationType, out var providerKey);
                        
                        <div class="flex items-center justify-between p-3 bg-gray-800 border border-gray-700 rounded-lg">
                            <span class="font-medium text-gray-300">@providerName</span>

                            @if (isLinked)
                            {
                                <!-- Đã liên kết: Nút Hủy liên kết -->
                                @using (Html.BeginUmbracoForm<UmbExternalLoginController>(nameof(UmbExternalLoginController.Disassociate)))
                                {
                                    <input type="hidden" name="providerKey" value="@providerKey"/>
                                    <button type="submit" name="provider" value="@login.ExternalLoginProvider.AuthenticationType"
                                            class="bg-red-600 hover:bg-red-700 text-white text-sm font-semibold py-1 px-3 rounded-md transition duration-150">
                                        Hủy liên kết
                                    </button>
                                    
                                    if (externalSignInError?.AuthenticationType == login.ExternalLoginProvider.AuthenticationType)
                                    {
                                        <p class="text-xs text-red-400 mt-1">@Html.DisplayFor(x => externalSignInError.Errors)</p>
                                    }
                                }
                            }
                            else
                            {
                                <!-- Chưa liên kết: Nút Liên kết -->
                                @using (Html.BeginUmbracoForm<UmbExternalLoginController>(nameof(UmbExternalLoginController.LinkLogin)))
                                {
                                    <button type="submit" name="provider" value="@login.ExternalLoginProvider.AuthenticationType"
                                            class="bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold py-1 px-3 rounded-md transition duration-150">
                                        Liên kết tài khoản @providerName
                                    </button>

                                    if (externalSignInError?.AuthenticationType == login.ExternalLoginProvider.AuthenticationType)
                                    {
                                        <p class="text-xs text-red-400 mt-1">@Html.DisplayFor(x => externalSignInError.Errors)</p>
                                    }
                                }
                            }
                        </div>
                    }
                </div>
            }
        }
    }
</div>
