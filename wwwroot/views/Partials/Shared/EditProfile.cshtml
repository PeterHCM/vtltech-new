@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Web.Website.Controllers
@using Umbraco.Cms.Web.Website.Models
@using Umbraco.Extensions
@using System.Linq
@inject MemberModelBuilderFactory memberModelBuilderFactory

@{
    var profileModel = await memberModelBuilderFactory
        .CreateProfileModel()
        .WithRedirectUrl(null)
        .WithCustomProperties(true)
        .BuildForCurrentMemberAsync();

    var success = TempData["FormSuccess"] != null;

    var query = Context.Request.Query.ToDictionary(k => k.Key, v => v.Value.ToString());
    query.Remove("tab");
    string baseQuery = string.Join("&", query.Select(kv => $"{kv.Key}={kv.Value}"));
    string buildTabUrl(string tab) => $"{Context.Request.Path}?{baseQuery}&tab={tab}";

    var activeTab = Context.Request.Query["tab"].ToString().ToLower();
    if (string.IsNullOrWhiteSpace(activeTab)) activeTab = "account";

    string tabClass(string tab) =>
        tab == activeTab
        ? "flex items-center gap-2 px-4 py-2 font-semibold text-white bg-primary rounded"
        : "flex items-center gap-2 px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-primary";

    string inputClass = "block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-400 shadow-sm focus:outline-none focus:ring-primary focus:border-primary";

    var dateAliases = new[] { "dateofbirth", "dateofissue", "dateofjoining" };

    var dropdownOptions = new Dictionary<string, List<string>>
    {
        { "maritalstatus", new List<string> { "ƒê·ªôc th√¢n", "ƒê√£ k·∫øt h√¥n", "Ly h√¥n" } },
        { "contracttype", new List<string> { "To√†n th·ªùi gian", "B√°n th·ªùi gian", "Th·ª≠ vi·ªác" } },
        { "position", new List<string> { "Nh√¢n vi√™n", "Tr∆∞·ªüng nh√≥m", "Qu·∫£n l√Ω" } },
        { "department", new List<string> { "K·∫ø to√°n", "K·ªπ thu·∫≠t", "Nh√¢n s·ª±" } },
        { "emergencycontact1relationship", new List<string> { "Cha", "M·∫π", "Anh/Ch·ªã", "B·∫°n b√®" } },
        { "emergencycontact2relationship", new List<string> { "Cha", "M·∫π", "Anh/Ch·ªã", "B·∫°n b√®" } }
    };
}

@if (profileModel != null)
{
    <div class="max-w-3xl mx-auto p-6 bg-white dark:bg-gray-900 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
        @if (success)
        {
            <div class="mb-4 text-green-600 dark:text-green-400 text-sm">
                ‚úÖ C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!
            </div>
        }

        <div class="mb-6 flex gap-4 flex-wrap">
            <a href="@buildTabUrl("account")" class="@tabClass("account")">üîê T√†i kho·∫£n</a>
            <a href="@buildTabUrl("personal")" class="@tabClass("personal")">üßç C√° nh√¢n</a>
            <a href="@buildTabUrl("work")" class="@tabClass("work")">üíº C√¥ng vi·ªác</a>
            <a href="@buildTabUrl("emergency1")" class="@tabClass("emergency1")">üö® Kh·∫©n c·∫•p 1</a>
            <a href="@buildTabUrl("emergency2")" class="@tabClass("emergency2")">üö® Kh·∫©n c·∫•p 2</a>
        </div>

        @using (Html.BeginUmbracoForm<UmbProfileController>("HandleUpdateProfile", new { RedirectUrl = Context.Request.Path + Context.Request.QueryString }))
        {
            <div asp-validation-summary="All" class="text-sm text-red-600 dark:text-red-400 mb-4"></div>

            @* Tr∆∞·ªùng h·ªá th·ªëng: lu√¥n render, ·∫©n n·∫øu kh√¥ng ·ªü tab account *@
            <div class="mb-4" style="@(activeTab == "account" ? "" : "display:none")">
                <label asp-for="@profileModel.Name" class="block font-medium mb-1 text-gray-700 dark:text-gray-300">T√™n</label>
                <input asp-for="@profileModel.Name" type="text" name="Name" value="@profileModel.Name" class="@inputClass" aria-required="true" />
            </div>

            <div class="mb-4" style="@(activeTab == "account" ? "" : "display:none")">
                <label asp-for="@profileModel.Email" class="block font-medium mb-1 text-gray-700 dark:text-gray-300">Email h·ªá th·ªëng</label>
                <input asp-for="@profileModel.Email"  class="@inputClass"  />
            </div>
            <div class="mb-4" style="@(activeTab == "account" ? "" : "display:none")">
                <label asp-for="@profileModel.UserName" class="block font-medium mb-1 text-gray-700 dark:text-gray-300">T√™n ƒëƒÉng nh·∫≠p</label>
                <input asp-for="@profileModel.UserName" class="@inputClass"  />
            </div>

            @foreach (var prop in profileModel.MemberProperties)
            {
                var alias = prop.Alias.ToLower();

                var shouldShow =
                    (activeTab == "account" && new[] { "phone" }.Contains(alias)) ||
                    (activeTab == "personal" && new[] {
                        "fullname", "phone", "personalemail", "gender", "maritalstatus", "dateofbirth", "nationalid", "dateofissue", "placeofissue", "taxcode", "permanentaddress", "currentaddress"
                    }.Contains(alias)) ||
                    (activeTab == "work" && new[] {
                        "position", "department", "dateofjoining", "contracttype"
                    }.Contains(alias)) ||
                    (activeTab == "emergency1" && alias.StartsWith("emergencycontact1")) ||
                    (activeTab == "emergency2" && alias.StartsWith("emergencycontact2"));

                <div class="mb-4" style="@(shouldShow ? "" : "display:none")">
                    <label class="block font-medium mb-1 text-gray-700 dark:text-gray-300">@prop.Name</label>

                    @if (dropdownOptions.ContainsKey(alias))
                    {
                        <select name="MemberProperties[@prop.Alias]" class="@inputClass">
                            @foreach (var option in dropdownOptions[alias])
                            {
                                <option value="@option" selected="@(option == prop.Value ? "selected" : null)">@option</option>
                            }
                        </select>
                    }
                    else if (dateAliases.Contains(alias))
                    {
                        <input type="date" name="MemberProperties[@prop.Alias]" value="@prop.Value" class="@inputClass" />
                    }
                    else
                    {
                        <input type="text" name="MemberProperties[@prop.Alias]" value="@prop.Value" class="@inputClass" />
                    }
                </div>
            }

            <div class="text-sm text-gray-500 mt-2">
                ‚ö†Ô∏è T·∫•t c·∫£ c√°c tr∆∞·ªùng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t, kh√¥ng ch·ªâ tab ƒëang m·ªü.
            </div>

            <button type="submit" class="w-full bg-primary hover:bg-secondary text-white font-medium py-2 px-4 rounded transition duration-200 mt-4">
                L∆∞u thay ƒë·ªïi
            </button>
        }
    </div>
}
