@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockListItem>
@using Umbraco.Cms.Web.Common.PublishedModels
@using Umbraco.Extensions

@{
    var themeObj = ViewData["Theme"];
    var bgClass = ThemeValue(themeObj, "BgClass", "bg-white");
    var textClass = ThemeValue(themeObj, "TextClass", "text-gray-800");
    var headingClass = ThemeValue(themeObj, "HeadingClass", "text-primary");
    var mutedTextClass = ThemeValue(themeObj, "MutedTextClass", "text-gray-600");
    var accentClass = ThemeValue(themeObj, "AccentClass", "text-primary");
    var buttonBgClass = ThemeValue(themeObj, "ButtonBgClass", "bg-primary");
    var buttonTextClass = ThemeValue(themeObj, "ButtonTextClass", "text-white");
    var buttonHoverClass = ThemeValue(themeObj, "ButtonHoverClass", "hover:bg-secondary");
    var shadowClass = ThemeValue(themeObj, "ShadowClass", "shadow-md");

    var content = Model.Content as HeroBanner;
    var heading = content?.Heading;
    var subtitle = content?.Subtitle;
    var image = content?.Image;
    var ctaLinks = content?.CtaLink;
}

<section class="relative @bgClass @textClass py-20 px-6 md:px-12 lg:px-24 w-full">
    <div class="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
        
        <div class="text-center md:text-left">
            <div class="flex justify-center md:justify-start mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10 @accentClass" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9h6v6H9z M4 4h16v16H4z" />
                </svg>
            </div>

            @if (!string.IsNullOrWhiteSpace(heading))
            {
                <h1 class="text-4xl font-bold mb-4 @headingClass">@heading</h1>
            }

            @if (!string.IsNullOrWhiteSpace(subtitle))
            {
                <p class="text-lg mb-6 @mutedTextClass">@subtitle</p>
            }

            @if (ctaLinks != null && ctaLinks.Any())
            {
                <div class="flex flex-wrap justify-center md:justify-start gap-3">
                    @foreach (var link in ctaLinks)
                    {
                        var url = link.Url;
                        var label = link.Name;

                        if (!string.IsNullOrWhiteSpace(url) && !string.IsNullOrWhiteSpace(label))
                        {
                            <a href="@url" target="@(link.Target ?? "_self")"
                               class="inline-flex items-center gap-2 @buttonBgClass @buttonTextClass px-6 py-3 rounded @buttonHoverClass transition text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                                </svg>
                                @label
                            </a>
                        }
                    }
                </div>
            }
        </div>

        <div class="w-full">
            @if (image != null)
            {
                <img src="@image.Url()" alt="@image.Name" class="w-full h-auto rounded-lg @shadowClass" />
            }
            else
            {
                <div class="text-center italic @mutedTextClass">Chưa có ảnh được chọn</div>
            }
        </div>
    </div>
</section>

@functions {
    public string ThemeValue(object theme, string key, string fallback)
    {
        return theme?.GetType().GetProperty(key)?.GetValue(theme)?.ToString() ?? fallback;
    }
}
