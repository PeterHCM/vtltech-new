@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Models
@using Umbraco.Cms.Core.Models.PublishedContent
@inherits UmbracoViewPage<BlockListItem>
@{
    var content = Model.Content;
    var documentContent = content.Value<BlockListModel>("documentContent");
    var settings = Umbraco.ContentAtRoot().FirstOrDefault(x => x.ContentType.Alias == "companySettings");
    var websiteLogo = settings.Value<IEnumerable<IPublishedContent>>("websiteLogoDark")?.FirstOrDefault() ?? settings.Value<IEnumerable<IPublishedContent>>("websiteLogoLight")?.FirstOrDefault(); // Fallback light nếu dark null
    var companyName = settings?.Value<string>("companyName") ?? "Viet Thang Loi Technology Company Limited";
    var documentTitle = content.Value<string>("documentTitle");
    var shortDescription = content?.Value<string>("description");
    var documentId = content?.Value<string>("documentId");
    var revision = content?.Value<string>("revision");
    var publicationDate = content?.Value<DateTime>("publicationDate");
    var lastRevisedDate = content?.Value<DateTime>("lastRevisedDate");
    var author = content?.Value<IPublishedContent>("author");
    var authorName = author != null ? author.Name : "Admin";
    var approvalStatus = content?.Value<string>("approvalStatus");
    var documentType = content?.Value<string>("documentType");
    var departments = content?.Value<string>("departments");

    // Hàm chuyển đổi documentType
    string GetDocumentTypeName(string code)
    {
        if (string.IsNullOrWhiteSpace(code))
            return "Không xác định";

        code = code.ToUpperInvariant();
        if (code.Contains("MNL")) return "Sổ tay";
        if (code.Contains("PLY")) return "Quy chế";
        if (code.Contains("PCS")) return "Quy trình";
        if (code.Contains("INS")) return "Hướng dẫn";
        if (code.Contains("FRM")) return "Biểu mẫu";
        return code;
    }

    // Hàm chuyển đổi departments
    string GetDepartmentName(string code)
    {
        if (string.IsNullOrWhiteSpace(code))
            return "Không xác định";

        code = code.ToUpperInvariant();
        if (code.Contains("AG")) return "Toàn công ty";
        if (code.Contains("AHR")) return "Hành chính & Nhân sự";
        if (code.Contains("SAL")) return "Kinh doanh";
        if (code.Contains("ACC")) return "Kế toán";
        if (code.Contains("PUR")) return "Mua hàng";
        return code;
    }

    var blockViewMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        { "heroBanner", "Partials/blocklist/heroBanner" },
        { "textBlock", "Partials/blocklist/textBlock" },
        { "imagesBlock", "Partials/blocklist/textBlock" },
        { "ctaBlock", "Partials/blocklist/ctaBlock" },
        { "internalDocument", "Partials/blocklist/internalDocument" },
        { "imageBlock", "Partials/blocklist/imageBlock" }
    };
}
<div id="printArea">
    <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-6 mb-8 shadow-2xl print:bg-white print:text-black">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4">
            @if (websiteLogo != null)
            {
                <div class="flex justify-center md:justify-start">
                    <img src="@websiteLogo.Url()" alt="@companyName logo" class="h-8 w-auto md:h-16 print:h-16" />
                </div>
            }
            <div class="text-center md:text-right flex-1">
                <h1 class="text-3xl md:text-4xl font-bold text-primary print:text-black">@documentTitle</h1>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(shortDescription))
        {
            <p class="text-xl text-gray-600 dark:text-gray-400 mb-4 print:text-black">@shortDescription</p>
        }
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 dark:text-gray-400 print:text-black">
            @if (!string.IsNullOrEmpty(documentId))
            {
                <div>
                    <p class="font-semibold">Mã số tài liệu</p>
                    <p>@documentId</p>
                </div>
            }
            @if (!string.IsNullOrEmpty(revision))
            {
                <div>
                    <p class="font-semibold">Phiên bản</p>
                    <p>@revision</p>
                </div>
            }
            @if (publicationDate != null)
            {
                <div>
                    <p class="font-semibold">Ngày ban hành</p>
                    <p>@publicationDate.Value.ToString("dd/MM/yyyy")</p>
                </div>
            }
            @if (lastRevisedDate != null)
            {
                <div>
                    <p class="font-semibold">Ngày sửa đổi gần nhất</p>
                    <p>@lastRevisedDate.Value.ToString("dd/MM/yyyy")</p>
                </div>
            }
            @if (authorName != null)
            {
                <div class="hidden print:block">
                    <p class="font-semibold">Tác giả</p>
                    <p>@authorName</p>
                </div>
            }
            @if (!string.IsNullOrEmpty(approvalStatus))
            {
                <div class="hidden md:flex print:block">
                    <p class="font-semibold">Trạng thái</p>
                    <p>@approvalStatus</p>
                </div>
            }
            @if (!string.IsNullOrEmpty(departments))
            {
                <div class="hidden md:flex print:block">
                    <p class="font-semibold">Ban hành bởi:</p>
                    <p>@GetDepartmentName(departments)</p>
                </div>
            }
            @if (!string.IsNullOrEmpty(documentType))
            {
                <div class="hidden md:flex print:block">
                    <p class="font-semibold">Loại tài liệu:</p>
                    <p>@GetDocumentTypeName(documentType)</p>
                </div>
            }
        </div>
    </div>
    @if (documentContent != null && documentContent.Any())
    {
        <div class="prose max-w-none text-gray-800 dark:prose-invert dark:text-slogan print:text-black print:prose-invert">
            @foreach (var block in documentContent)
            {
                var alias = block.Content.ContentType.Alias;
                if (blockViewMap.TryGetValue(alias, out var partialPath))
                {
                    @await Html.PartialAsync(partialPath, block)
                }
                else
                {
                    <p class="text-red-500 print:text-black">Không tìm thấy view cho block: <strong>@alias</strong></p>
                }
            }
        </div>
    }
</div>
<div class="flex mb-6">
    <button onclick="printSection('printArea')" class="inline-flex items-center gap-2 px-4 py-2 bg-primary text-white rounded hover:bg-white hover:text-primary border border-primary transition">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11V3m0 0L8 7m4-4l4 4M6 13h12v8H6v-8z" />
        </svg>
    </button>
</div>