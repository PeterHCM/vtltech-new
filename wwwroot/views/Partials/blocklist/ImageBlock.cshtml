@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Models.PublishedContent
@inherits UmbracoViewPage<BlockListItem>

@{
    var content = Model.Content;
    var images = content.Value<IEnumerable<IPublishedContent>>("imageGallery") ?? Enumerable.Empty<IPublishedContent>();
    var layout = content.Value<string>("layout")?.ToLowerInvariant() ?? "grid";
    var caption = content.Value<string>("caption")?.ToLowerInvariant() ?? "Hình ảnh công ty TNHH Kỹ Thuật Việt Thắng Lợi";
}

@if (images.Any())
{
    <section class="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 rounded-lg shadow-lg dark:shadow-xl transition-colors duration-300">
        @if (layout == "grid")
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 sm:gap-4">
                @foreach (var image in images)
                {
                    var imageUrl = image.Url();
                    var imageAlt = image.Value<string>("alt") ?? caption;
                    <div class="relative aspect-[4/3] rounded-xl overflow-hidden shadow-md dark:shadow-xl cursor-pointer group" onclick="openLightbox('@imageUrl', '@imageAlt')">
                        <img src="@(imageUrl)?width=600" alt="@imageAlt" class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" />
                    </div>
                }
            </div>
        }
        else if (layout == "masonry")
        {
            <div class="columns-2 sm:columns-3 lg:columns-4 gap-2 sm:gap-4">
                @foreach (var image in images)
                {
                    var imageUrl = image.Url();
                    var imageAlt = image.Value<string>("alt") ?? caption;
                    <div class="mb-2 sm:mb-4 break-inside-avoid">
                        <div class="relative rounded-xl overflow-hidden shadow-md dark:shadow-xl cursor-pointer group">
                            <img src="@(imageUrl)?width=600" alt="@imageAlt" class="w-full h-auto object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" />
                        </div>
                    </div>
                }
            </div>
        }
        else if (layout == "carousel")
        {
            var imageUrls = images.Select(i => i.Url() ?? "https://placehold.co/1920x1080/4a4a4a/ffffff?text=No+Image").ToList();
            var imageUrlsJson = System.Text.Json.JsonSerializer.Serialize(imageUrls);

            <div class="relative w-full h-auto max-h-[400px] sm:max-h-[500px] overflow-hidden rounded-lg">
                <div class="absolute inset-0 bg-black/50 dark:bg-black/60 z-10"></div>

                <div id="carousel-track" class="relative z-20 flex w-full h-full transition-transform duration-500 ease-in-out">
                    @foreach (var image in images)
                    {
                        var imageUrl = image.Url();
                        var imageAlt = image.Value<string>("alt") ?? caption;
                        <div class="carousel-slide w-full shrink-0 h-full flex items-center justify-center text-center px-4 sm:px-6">
                            <div class="w-full h-full flex flex-col items-center justify-center">
                                <img src="@(imageUrl)?width=1200" alt="@imageAlt" class="w-full h-auto max-h-[350px] sm:max-h-[450px] object-contain rounded-lg shadow-2xl" loading="lazy" />
                                <div class="text-white dark:text-gray-100 text-sm sm:text-base mt-2 max-w-xl text-center">@imageAlt</div>
                            </div>
                        </div>
                    }
                </div>

                <button id="carousel-prev" class="absolute top-1/2 left-2 sm:left-4 -translate-y-1/2 p-2 sm:p-3 rounded-full bg-white/40 dark:bg-gray-800/40 backdrop-blur-sm text-gray-800 dark:text-gray-200 hover:bg-white/60 dark:hover:bg-gray-700/60 transition-colors z-30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button id="carousel-next" class="absolute top-1/2 right-2 sm:right-4 -translate-y-1/2 p-2 sm:p-3 rounded-full bg-white/40 dark:bg-gray-800/40 backdrop-blur-sm text-gray-800 dark:text-gray-200 hover:bg-white/60 dark:hover:bg-gray-700/60 transition-colors z-30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>

                <div id="carousel-dots" class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 z-30">
                    @for (int i = 0; i < images.Count(); i++)
                    {
                        <button class="dot w-2 h-2 sm:w-3 sm:h-3 rounded-full bg-gray-400 dark:bg-gray-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 @(i == 0 ? "bg-gray-800 dark:bg-gray-200 w-4 sm:w-6" : "")"></button>
                    }
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    if ('carousel' === '@layout') {
                        const carouselTrack = document.getElementById('carousel-track');
                        const prevButton = document.getElementById('carousel-prev');
                        const nextButton = document.getElementById('carousel-next');
                        const dotsContainer = document.getElementById('carousel-dots');
                        const slides = carouselTrack.querySelectorAll('.carousel-slide');
                        const dots = dotsContainer.querySelectorAll('.dot');
                        
                        let currentIndex = 0;

                        const updateCarousel = () => {
                            const offset = -currentIndex * 100;
                            carouselTrack.style.transform = `translateX(${offset}%)`;
                            carouselTrack.style.transition = 'transform 0.5s ease-in-out'; // Đảm bảo transition mượt
                            
                            dots.forEach((dot, index) => {
                                dot.classList.toggle('bg-gray-800', index === currentIndex);
                                dot.classList.toggle('dark:bg-gray-200', index === currentIndex);
                                dot.classList.toggle('w-4', index === currentIndex);
                                dot.classList.toggle('sm:w-6', index === currentIndex);
                                dot.classList.toggle('bg-gray-400', index !== currentIndex);
                                dot.classList.toggle('dark:bg-gray-600', index !== currentIndex);
                                dot.classList.toggle('w-2', index !== currentIndex);
                                dot.classList.toggle('sm:w-3', index !== currentIndex);
                            });
                        };

                        prevButton.addEventListener('click', () => {
                            currentIndex = currentIndex > 0 ? currentIndex - 1 : slides.length - 1;
                            updateCarousel();
                        });

                        nextButton.addEventListener('click', () => {
                            currentIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : 0;
                            updateCarousel();
                        });

                        dots.forEach((dot, index) => {
                            dot.addEventListener('click', () => {
                                currentIndex = index;
                                updateCarousel();
                            });
                        });

                        // Tự động chuyển slide sau mỗi 5 giây
                        let autoSlide = setInterval(() => {
                            currentIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : 0;
                            updateCarousel();
                        }, 5000);

                        // Dừng auto slide khi tương tác
                        carouselTrack.addEventListener('touchstart', () => clearInterval(autoSlide));
                        carouselTrack.addEventListener('touchend', () => {
                            autoSlide = setInterval(() => {
                                currentIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : 0;
                                updateCarousel();
                            }, 5000);
                        });

                        updateCarousel();
                    }
                });
            </script>
        }
        else if (layout == "thumbnail-gallery")
        {
            var firstImage = images.FirstOrDefault();
            <div class="space-y-4">
                @if (firstImage != null)
                {
                    var firstImageUrl = firstImage.Url();
                    var firstImageAlt = firstImage.Value<string>("alt") ?? caption;
                    <div class="relative w-full h-auto max-h-[350px] sm:max-h-[400px] overflow-hidden rounded-lg shadow-lg dark:shadow-xl flex items-center justify-center bg-gray-200 dark:bg-gray-800">
                        <img id="main-gallery-image" src="@(firstImageUrl)?width=1200" alt="@firstImageAlt" class="w-full h-auto max-h-full object-contain" loading="lazy" />
                    </div>
                }

                <div class="flex space-x-2 sm:space-x-4 p-2 overflow-x-auto scrollbar-thin scrollbar-thumb-gray-400 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">
                    @foreach (var image in images)
                    {
                        var thumbUrl = image.Url();
                        var thumbAlt = image.Value<string>("alt") ?? caption;
                        <div class="flex-shrink-0 w-20 h-20 sm:w-24 sm:h-24 rounded-lg overflow-hidden border-2 border-transparent transition-all duration-300 cursor-pointer hover:border-blue-500 @(image == firstImage ? "border-blue-500" : "")"
                             onclick="updateMainImage(this, '@(thumbUrl)?width=1200', '@thumbAlt')">
                            <img src="@(thumbUrl)?width=200" alt="@thumbAlt" class="w-full h-full object-cover" loading="lazy" />
                        </div>
                    }
                </div>
            </div>

            <script>
                const updateMainImage = (clickedThumbnail, newImageUrl, newImageAlt) => {
                    const mainImage = document.getElementById('main-gallery-image');
                    const thumbnails = document.querySelectorAll('.flex-shrink-0');
                    mainImage.src = newImageUrl;
                    mainImage.alt = newImageAlt;
                    thumbnails.forEach(thumb => thumb.classList.remove('border-blue-500'));
                    clickedThumbnail.classList.add('border-blue-500');
                };
            </script>
        }
    </section>

    <div id="lightbox" class="fixed inset-0 bg-black/90 dark:bg-black/95 flex items-center justify-center z-50 p-2 sm:p-4 hidden" onclick="closeLightbox()">
        <span class="absolute top-2 sm:top-4 right-4 sm:right-6 text-white text-4xl sm:text-5xl cursor-pointer hover:text-gray-300">&times;</span>
        <img id="lightbox-image" src="" alt="" class="max-w-[90%] max-h-[80vh] sm:max-h-[90vh] rounded-lg shadow-2xl" onclick="event.stopPropagation()" />
        <div id="lightbox-caption" class="text-white dark:text-gray-100 text-sm sm:text-base mt-2 sm:mt-4 max-w-[90%] text-center"></div>
    </div>

    <script>
        const openLightbox = (imageUrl, imageAlt) => {
            const lightbox = document.getElementById('lightbox');
            const lightboxImage = document.getElementById('lightbox-image');
            const lightboxCaption = document.getElementById('lightbox-caption');
            lightboxImage.src = imageUrl;
            lightboxImage.alt = imageAlt;
            lightboxCaption.textContent = imageAlt;
            lightbox.classList.remove('hidden');
        };

        const closeLightbox = () => {
            document.getElementById('lightbox').classList.add('hidden');
        };
    </script>
}