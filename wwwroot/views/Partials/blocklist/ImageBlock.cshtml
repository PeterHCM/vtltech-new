@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Models.PublishedContent
@inherits UmbracoViewPage<BlockListItem>

@{
    var content = Model.Content;
    var images = content.Value<IEnumerable<IPublishedContent>>("imageGallery") ?? Enumerable.Empty<IPublishedContent>();

    // Lấy tham số layout từ thuộc tính của block
    var layout = content.Value<string>("layout")?.ToLowerInvariant() ?? "grid";
    var caption = content.Value<string>("caption")?.ToLowerInvariant() ?? "Hình ảnh công ty TNHH Kỹ Thuật Việt Thắng Lợi";
}

@if (images.Any())
{
    <section class="container mx-auto px-4 py-8 bg-white dark:bg-gray-900 rounded-lg shadow-lg dark:shadow-xl transition-colors duration-300">
        @if (layout == "grid")
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                @foreach (var image in images)
                {
                    var imageUrl = image.Url();
                    var imageAlt = image.Value<string>("alt") ?? caption;
                    <div class="rounded-xl overflow-hidden shadow-lg dark:shadow-xl transform hover:scale-105 transition-transform duration-300 cursor-pointer" onclick="openLightbox('@imageUrl', '@imageAlt')">
                        <img src="@(imageUrl)?width=600" alt="@imageAlt" class="w-full h-auto object-cover" />
                    </div>
                }
            </div>
        }
        else if (layout == "masonry")
        {
            <div class="columns-2 md:columns-3 lg:columns-4 gap-4">
                @foreach (var image in images)
                {
                    var imageUrl = image.Url();
                    var imageAlt = image.Value<string>("alt") ?? caption;
                    <div class="mb-4 break-inside-avoid">
                        <div class="rounded-xl overflow-hidden shadow-lg dark:shadow-xl transform hover:scale-105 transition-transform duration-300 cursor-pointer" onclick="openLightbox('@imageUrl', '@imageAlt')">
                            <img src="@(imageUrl)?width=600" alt="@imageAlt" class="w-full h-auto" />
                        </div>
                    </div>
                }
            </div>
        }
        else if (layout == "carousel")
        {
            var imageUrls = images.Select(i => i.Url() ?? "https://placehold.co/1920x1080/4a4a4a/ffffff?text=No+Image").ToList();
            var imageUrlsJson = System.Text.Json.JsonSerializer.Serialize(imageUrls);

            <div class="relative w-full h-[500px] overflow-hidden">
                <div class="absolute inset-0 bg-black/60 z-10"></div>

                <div id="carousel-track" class="relative z-20 flex w-full h-full transition-transform duration-700 ease-in-out">
                    @foreach (var image in images)
                    {
                        var imageUrl = image.Url();
                        var imageAlt = image.Value<string>("alt") ?? caption;

                        <div class="carousel-slide w-full shrink-0 h-full flex items-center justify-center text-center text-white px-6 md:px-12">
                            <div class="w-full h-full flex flex-col items-center justify-center">
                                <img src="@(imageUrl)?width=1600" alt="@imageAlt" class="w-full h-full object-cover rounded-lg shadow-2xl" />
                                <div class="text-white text-lg mt-4 max-w-2xl text-center">@imageAlt</div>
                            </div>
                        </div>
                    }
                </div>

                <button id="carousel-prev" class="absolute top-1/2 left-4 -translate-y-1/2 p-3 rounded-full bg-white/30 backdrop-blur-sm text-gray-800 dark:text-white hover:bg-white/50 transition-colors z-30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button id="carousel-next" class="absolute top-1/2 right-4 -translate-y-1/2 p-3 rounded-full bg-white/30 backdrop-blur-sm text-gray-800 dark:text-white hover:bg-white/50 transition-colors z-30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>

                <div id="carousel-dots" class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2 z-30">
                    @for (int i = 0; i < images.Count(); i++)
                    {
                        <button class="dot w-3 h-3 rounded-full bg-gray-400 dark:bg-gray-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"></button>
                    }
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    if ('carousel' === '@layout') {
                        const carouselTrack = document.getElementById('carousel-track');
                        const prevButton = document.getElementById('carousel-prev');
                        const nextButton = document.getElementById('carousel-next');
                        const dotsContainer = document.getElementById('carousel-dots');
                        const slides = carouselTrack.querySelectorAll('.carousel-slide');
                        const dots = dotsContainer.querySelectorAll('.dot');
                        
                        let currentIndex = 0;

                        const updateCarousel = () => {
                            const offset = -currentIndex * 100;
                            carouselTrack.style.transform = `translateX(${offset}%)`;
                            
                            dots.forEach((dot, index) => {
                                dot.classList.remove('bg-gray-800', 'dark:bg-gray-200', 'w-6');
                                dot.classList.add('bg-gray-400', 'dark:bg-gray-600', 'w-3');
                                if (index === currentIndex) {
                                    dot.classList.add('bg-gray-800', 'dark:bg-gray-200', 'w-6');
                                    dot.classList.remove('bg-gray-400', 'dark:bg-gray-600', 'w-3');
                                }
                            });
                        };

                        prevButton.addEventListener('click', () => {
                            currentIndex = (currentIndex > 0) ? currentIndex - 1 : slides.length - 1;
                            updateCarousel();
                        });

                        nextButton.addEventListener('click', () => {
                            currentIndex = (currentIndex < slides.length - 1) ? currentIndex + 1 : 0;
                            updateCarousel();
                        });

                        dots.forEach((dot, index) => {
                            dot.addEventListener('click', () => {
                                currentIndex = index;
                                updateCarousel();
                            });
                        });

                        // Tự động chuyển slide sau mỗi 5 giây
                        setInterval(() => {
                            currentIndex = (currentIndex < slides.length - 1) ? currentIndex + 1 : 0;
                            updateCarousel();
                        }, 5000);

                        updateCarousel();
                    }
                });
            </script>
        }
        else if (layout == "thumbnail-gallery")
        {
            var firstImage = images.FirstOrDefault();

            <div class="space-y-4">
                @if (firstImage != null)
                {
                    var firstImageUrl = firstImage.Url();
                    var firstImageAlt = firstImage.Value<string>("alt") ?? caption;
                    <div class="relative w-full h-auto max-h-[400px] overflow-hidden rounded-lg shadow-lg dark:shadow-xl flex items-center justify-center bg-gray-200 dark:bg-gray-800">
                        <img id="main-gallery-image" src="@(firstImageUrl)?width=1200" alt="@firstImageAlt" class="w-auto h-full object-contain" />
                    </div>
                }

                <div class="flex space-x-4 p-2 overflow-x-auto scrollbar-thin scrollbar-thumb-gray-400 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">
                    @foreach (var image in images)
                    {
                        var thumbUrl = image.Url();
                        var thumbAlt = image.Value<string>("alt") ?? caption;
                        <div class="flex-shrink-0 w-24 h-24 sm:w-32 sm:h-32 rounded-lg overflow-hidden border-2 border-transparent transition-all duration-300 cursor-pointer hover:border-blue-500 @(image == firstImage ? "border-blue-500" : "")"
                             onclick="updateMainImage(this, '@(thumbUrl)?width=1200', '@thumbAlt')">
                            <img src="@(thumbUrl)?width=200" alt="@thumbAlt" class="w-full h-full object-cover" />
                        </div>
                    }
                </div>
            </div>

            <script>
                const updateMainImage = (clickedThumbnail, newImageUrl, newImageAlt) => {
                    const mainImage = document.getElementById('main-gallery-image');
                    const thumbnails = document.querySelectorAll('.flex-shrink-0');

                    // Cập nhật ảnh chính
                    mainImage.src = newImageUrl;
                    mainImage.alt = newImageAlt;

                    // Xóa và thêm border cho ảnh nhỏ
                    thumbnails.forEach(thumb => {
                        thumb.classList.remove('border-blue-500');
                    });
                    clickedThumbnail.classList.add('border-blue-500');
                };
            </script>
        }
    </section>
    
    <div id="lightbox" class="fixed inset-0 bg-black/90 dark:bg-black/95 flex items-center justify-center z-50 p-4 hidden" onclick="closeLightbox()">
        <span class="absolute top-4 right-6 text-white text-5xl cursor-pointer hover:text-gray-300">&times;</span>
        <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full rounded-lg shadow-2xl" onclick="event.stopPropagation()">
        <div id="lightbox-caption" class="text-white dark:text-gray-100 text-lg mt-4 max-w-2xl text-center"></div>
    </div>

    <script>
        const openLightbox = (imageUrl, imageAlt) => {
            const lightbox = document.getElementById('lightbox');
            const lightboxImage = document.getElementById('lightbox-image');
            const lightboxCaption = document.getElementById('lightbox-caption');
            lightboxImage.src = imageUrl;
            lightboxImage.alt = imageAlt;
            lightboxCaption.textContent = imageAlt;
            lightbox.classList.remove('hidden');
        };

        const closeLightbox = () => {
            document.getElementById('lightbox').classList.add('hidden');
        };
    </script>
}